/*
 * phc -- the open source php compiler
 * see doc/license/readme.license for licensing information
 *
 * Macro-Inline Code Generator (pronounced 'mig', like wig)
 */

#ifndef PHC_MICG_GEN
#define PHC_MICG_GEN

#include "MICG.h"

#include "lib/String.h"
#include "lib/Map.h"

namespace MICG
{

class Symtable : public Map<string, Object*>
{
public:
	Object* get_attr (string param_name, string attr_name);
};

}

class MICG_gen
{
public:
	void add_macro (MICG::Macro*);
	void add_macro_def (string);


	// It is difficult to call this with variadic arguments. va_list wont work,
	// and overloading operators is hassle. The simplest thing is just to have
	// one signature of each length we need, and assume we wont need more thn 8
	// arguments or so.
	string instantiate (string macro_name, Object* obj1, Object* obj2);

	// Check that the signature matches (its not called 'matches' to avoid
	// overloading the word 'match', which is generated by maketea).
	bool suitable (MICG::Macro* sig, Object_list* params);

	// Give an error if OBJ cannot be coerced to TYPE.
	void check_type (MICG::TYPE_NAME* type_name, Object* obj);

	MICG::Symtable* get_symtable (string macro_name, MICG::Formal_parameter_list*, Object_list*);

	// Actually substitute the parameters into the body.
	string instantiate_body (MICG::Body* body, MICG::Symtable* symtable);


	Map<string, MICG::Macro_list> macros;
};



#endif // PHC_MICG_GEN

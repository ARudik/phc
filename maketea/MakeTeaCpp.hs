{-
 	phc -- the open source PHP compiler
	See license/README.license for licensing information

	Abstract datatype for C++ classes	
-}

module MakeTeaCpp where

import MakeTeaLib

-- Type definitions
type ClassName = String
type VariableName = String
type MethodName = String
type Body = [String]

data IsVirtual = Virtual | NonVirtual | PureVirtual
	deriving Eq
data IsStatic = Static | NonStatic
	deriving Eq
data IsConcrete = Concrete | Abstract

-- NoType is used for the return type of constructors
data Type = NoType | Void | Type String 
	deriving Eq
data Method = Method Signature Body
	deriving Eq
data Variable = Variable Type VariableName
	deriving Eq
data CppClass = CppClass IsConcrete ClassName [ClassName] [Variable] [Method]
data Signature = Signature IsVirtual IsStatic Type MethodName [Parameter]
	deriving Eq
data Parameter = Parameter Variable String
	deriving Eq

-- CppClass comparison
instance Eq CppClass where
	(CppClass _ a_name _ _ _) == (CppClass _ b_name _ _ _) = a_name == b_name

-- Pretty printers 
instance Show CppClass where
	show c = (show_class_signature c) ++ (show_class_methods c)

instance Show Parameter where
	show = show_parameter False 

show_parameter :: Bool -> Parameter -> String
show_parameter is_implementation (Parameter (Variable t n) def) =
	if 
		(def == "") || is_implementation
	then
		(show t) ++ " " ++ n
	else
		(show t) ++ " " ++ n ++ " = " ++ def

show_class_signature :: CppClass -> String
show_class_signature (CppClass _ name inh attr methods) = 
	"class " ++ name ++ sc ++ "\n" ++
	"{\n" ++
	"public:\n" ++ 
		(ppifix_ms "\t" ";\n" "" attr) ++ 
		"\n" ++
	"public:\n" ++
		(ppifix_ms "\t" ";\n" "" (map extract_signature methods)) ++ 
	"};\n"
	where
		sc = 
			if 
				null inh 
			then 
				"" 
			else 
				" : " ++ (ppifix "public virtual " "" ", " inh)
	
show_class_methods :: CppClass -> String
show_class_methods (CppClass _ name inh attr methods) = 
	(ppifix "" "" "\n" (map (show_method name) methods))

instance Show Variable where
	show (Variable t n) = (show t) ++ " " ++ n

instance Show Signature where
	show = show_signature False ""

instance Show Type where
	show NoType = ""
	show Void = "void"
	show (Type t) = t

-- Pretty print a signature; if is_implementation, do not show "virtual", but do
-- show "class_name::"
show_signature :: Bool -> ClassName -> Signature -> String
show_signature is_implementation class_name signature = 
		virtual_str ++ static_str ++ rt ++ n ++ "(" ++ (comma_sep_list (map (show_parameter is_implementation) params)) ++ ")"  ++ purevirtual
	where
		(Signature virtual static return_type name params) = signature
		virtual_str = 
			case virtual of
				Virtual | not is_implementation -> "virtual " 
				PureVirtual | not is_implementation -> "virtual " 
				_ -> ""
		static_str = 
			case static of
				Static | not is_implementation -> "static "
				_ -> ""
		rt = case return_type of NoType -> "" ; _ -> show return_type ++ " "
		n = (if is_implementation then class_name ++ "::" else "") ++ name
		purevirtual = case virtual of
			PureVirtual -> " = 0"
			_ -> "" 

-- Unparse a method body (we need a context to determine the classname)
show_method :: ClassName -> Method -> String
show_method classname (Method (Signature PureVirtual _ _ _ _) _) = ""
show_method classname (Method signature body) =
		(show_signature True classname signature) ++ "\n" ++
		"{\n" ++
			(ppifix "\t" "\n" "" body) ++
		"}\n"

-- Extract the signature from a method definition
extract_signature :: Method -> Signature
extract_signature (Method sig _) = sig

-- Check whether a type is a pointer (top-level only)
is_pointer :: Type -> Bool
is_pointer NoType = False
is_pointer (Type t) = last t == '*'  

-- Header
maketea_header :: String
maketea_header = unlines
	 [
	  "/*",
 	  " * This code is autogenerated by MakeTea. Do not edit.",
	  " */",
	  ""
	 ]

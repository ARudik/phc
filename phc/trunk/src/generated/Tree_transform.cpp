/*
 * This code is autogenerated by MakeTea. Do not edit.
 */

#include "Tree_transform.h"

Tree_transform::~Tree_transform()
{
}

AST_php_script* Tree_transform::pre_php_script(AST_php_script* in)
{
	return in;
}

AST_php_script* Tree_transform::post_php_script(AST_php_script* in)
{
	return in;
}

void Tree_transform::pre_actual_parameter(AST_actual_parameter* in, AST_actual_parameter_list* out)
{
	out->push_back(in);
}

void Tree_transform::post_actual_parameter(AST_actual_parameter* in, AST_actual_parameter_list* out)
{
	out->push_back(in);
}

AST_expr* Tree_transform::pre_array(AST_array* in)
{
	return in;
}

AST_expr* Tree_transform::post_array(AST_array* in)
{
	return in;
}

void Tree_transform::pre_array_elem(AST_array_elem* in, AST_array_elem_list* out)
{
	out->push_back(in);
}

void Tree_transform::post_array_elem(AST_array_elem* in, AST_array_elem_list* out)
{
	out->push_back(in);
}

AST_expr* Tree_transform::pre_assignment(AST_assignment* in)
{
	return in;
}

AST_expr* Tree_transform::post_assignment(AST_assignment* in)
{
	return in;
}

AST_attr_mod* Tree_transform::pre_attr_mod(AST_attr_mod* in)
{
	return in;
}

AST_attr_mod* Tree_transform::post_attr_mod(AST_attr_mod* in)
{
	return in;
}

void Tree_transform::pre_attribute(AST_attribute* in, AST_member_list* out)
{
	out->push_back(in);
}

void Tree_transform::post_attribute(AST_attribute* in, AST_member_list* out)
{
	out->push_back(in);
}

AST_expr* Tree_transform::pre_bin_op(AST_bin_op* in)
{
	return in;
}

AST_expr* Tree_transform::post_bin_op(AST_bin_op* in)
{
	return in;
}

void Tree_transform::pre_break(AST_break* in, AST_statement_list* out)
{
	out->push_back(in);
}

void Tree_transform::post_break(AST_break* in, AST_statement_list* out)
{
	out->push_back(in);
}

AST_expr* Tree_transform::pre_cast(AST_cast* in)
{
	return in;
}

AST_expr* Tree_transform::post_cast(AST_cast* in)
{
	return in;
}

void Tree_transform::pre_catch(AST_catch* in, AST_catch_list* out)
{
	out->push_back(in);
}

void Tree_transform::post_catch(AST_catch* in, AST_catch_list* out)
{
	out->push_back(in);
}

void Tree_transform::pre_class_def(AST_class_def* in, AST_class_def_list* out)
{
	out->push_back(in);
}

void Tree_transform::post_class_def(AST_class_def* in, AST_class_def_list* out)
{
	out->push_back(in);
}

AST_class_mod* Tree_transform::pre_class_mod(AST_class_mod* in)
{
	return in;
}

AST_class_mod* Tree_transform::post_class_mod(AST_class_mod* in)
{
	return in;
}

AST_expr* Tree_transform::pre_clone(AST_clone* in)
{
	return in;
}

AST_expr* Tree_transform::post_clone(AST_clone* in)
{
	return in;
}

AST_expr* Tree_transform::pre_conditional_expr(AST_conditional_expr* in)
{
	return in;
}

AST_expr* Tree_transform::post_conditional_expr(AST_conditional_expr* in)
{
	return in;
}

AST_expr* Tree_transform::pre_constant(AST_constant* in)
{
	return in;
}

AST_expr* Tree_transform::post_constant(AST_constant* in)
{
	return in;
}

void Tree_transform::pre_continue(AST_continue* in, AST_statement_list* out)
{
	out->push_back(in);
}

void Tree_transform::post_continue(AST_continue* in, AST_statement_list* out)
{
	out->push_back(in);
}

void Tree_transform::pre_declare(AST_declare* in, AST_statement_list* out)
{
	out->push_back(in);
}

void Tree_transform::post_declare(AST_declare* in, AST_statement_list* out)
{
	out->push_back(in);
}

void Tree_transform::pre_directive(AST_directive* in, AST_directive_list* out)
{
	out->push_back(in);
}

void Tree_transform::post_directive(AST_directive* in, AST_directive_list* out)
{
	out->push_back(in);
}

void Tree_transform::pre_do(AST_do* in, AST_statement_list* out)
{
	out->push_back(in);
}

void Tree_transform::post_do(AST_do* in, AST_statement_list* out)
{
	out->push_back(in);
}

void Tree_transform::pre_eval_expr(AST_eval_expr* in, AST_statement_list* out)
{
	out->push_back(in);
}

void Tree_transform::post_eval_expr(AST_eval_expr* in, AST_statement_list* out)
{
	out->push_back(in);
}

void Tree_transform::pre_for(AST_for* in, AST_statement_list* out)
{
	out->push_back(in);
}

void Tree_transform::post_for(AST_for* in, AST_statement_list* out)
{
	out->push_back(in);
}

void Tree_transform::pre_foreach(AST_foreach* in, AST_statement_list* out)
{
	out->push_back(in);
}

void Tree_transform::post_foreach(AST_foreach* in, AST_statement_list* out)
{
	out->push_back(in);
}

void Tree_transform::pre_formal_parameter(AST_formal_parameter* in, AST_formal_parameter_list* out)
{
	out->push_back(in);
}

void Tree_transform::post_formal_parameter(AST_formal_parameter* in, AST_formal_parameter_list* out)
{
	out->push_back(in);
}

void Tree_transform::pre_if(AST_if* in, AST_statement_list* out)
{
	out->push_back(in);
}

void Tree_transform::post_if(AST_if* in, AST_statement_list* out)
{
	out->push_back(in);
}

AST_expr* Tree_transform::pre_ignore_errors(AST_ignore_errors* in)
{
	return in;
}

AST_expr* Tree_transform::post_ignore_errors(AST_ignore_errors* in)
{
	return in;
}

AST_expr* Tree_transform::pre_instanceof(AST_instanceof* in)
{
	return in;
}

AST_expr* Tree_transform::post_instanceof(AST_instanceof* in)
{
	return in;
}

void Tree_transform::pre_interface_def(AST_interface_def* in, AST_interface_def_list* out)
{
	out->push_back(in);
}

void Tree_transform::post_interface_def(AST_interface_def* in, AST_interface_def_list* out)
{
	out->push_back(in);
}

AST_expr* Tree_transform::pre_list_assignment(AST_list_assignment* in)
{
	return in;
}

AST_expr* Tree_transform::post_list_assignment(AST_list_assignment* in)
{
	return in;
}

AST_list_elements* Tree_transform::pre_list_elements(AST_list_elements* in)
{
	return in;
}

AST_list_elements* Tree_transform::post_list_elements(AST_list_elements* in)
{
	return in;
}

void Tree_transform::pre_method(AST_method* in, AST_member_list* out)
{
	out->push_back(in);
}

void Tree_transform::post_method(AST_method* in, AST_member_list* out)
{
	out->push_back(in);
}

AST_expr* Tree_transform::pre_method_invocation(AST_method_invocation* in)
{
	return in;
}

AST_expr* Tree_transform::post_method_invocation(AST_method_invocation* in)
{
	return in;
}

AST_method_mod* Tree_transform::pre_method_mod(AST_method_mod* in)
{
	return in;
}

AST_method_mod* Tree_transform::post_method_mod(AST_method_mod* in)
{
	return in;
}

AST_expr* Tree_transform::pre_new(AST_new* in)
{
	return in;
}

AST_expr* Tree_transform::post_new(AST_new* in)
{
	return in;
}

void Tree_transform::pre_nop(AST_nop* in, AST_statement_list* out)
{
	out->push_back(in);
}

void Tree_transform::post_nop(AST_nop* in, AST_statement_list* out)
{
	out->push_back(in);
}

AST_expr* Tree_transform::pre_post_op(AST_post_op* in)
{
	return in;
}

AST_expr* Tree_transform::post_post_op(AST_post_op* in)
{
	return in;
}

AST_expr* Tree_transform::pre_pre_op(AST_pre_op* in)
{
	return in;
}

AST_expr* Tree_transform::post_pre_op(AST_pre_op* in)
{
	return in;
}

AST_reflection* Tree_transform::pre_reflection(AST_reflection* in)
{
	return in;
}

AST_reflection* Tree_transform::post_reflection(AST_reflection* in)
{
	return in;
}

void Tree_transform::pre_return(AST_return* in, AST_statement_list* out)
{
	out->push_back(in);
}

void Tree_transform::post_return(AST_return* in, AST_statement_list* out)
{
	out->push_back(in);
}

AST_signature* Tree_transform::pre_signature(AST_signature* in)
{
	return in;
}

AST_signature* Tree_transform::post_signature(AST_signature* in)
{
	return in;
}

void Tree_transform::pre_static_declaration(AST_static_declaration* in, AST_statement_list* out)
{
	out->push_back(in);
}

void Tree_transform::post_static_declaration(AST_static_declaration* in, AST_statement_list* out)
{
	out->push_back(in);
}

void Tree_transform::pre_switch(AST_switch* in, AST_statement_list* out)
{
	out->push_back(in);
}

void Tree_transform::post_switch(AST_switch* in, AST_statement_list* out)
{
	out->push_back(in);
}

void Tree_transform::pre_switch_case(AST_switch_case* in, AST_switch_case_list* out)
{
	out->push_back(in);
}

void Tree_transform::post_switch_case(AST_switch_case* in, AST_switch_case_list* out)
{
	out->push_back(in);
}

void Tree_transform::pre_throw(AST_throw* in, AST_statement_list* out)
{
	out->push_back(in);
}

void Tree_transform::post_throw(AST_throw* in, AST_statement_list* out)
{
	out->push_back(in);
}

void Tree_transform::pre_try(AST_try* in, AST_statement_list* out)
{
	out->push_back(in);
}

void Tree_transform::post_try(AST_try* in, AST_statement_list* out)
{
	out->push_back(in);
}

AST_type* Tree_transform::pre_type(AST_type* in)
{
	return in;
}

AST_type* Tree_transform::post_type(AST_type* in)
{
	return in;
}

AST_expr* Tree_transform::pre_unary_op(AST_unary_op* in)
{
	return in;
}

AST_expr* Tree_transform::post_unary_op(AST_unary_op* in)
{
	return in;
}

void Tree_transform::pre_unset(AST_unset* in, AST_statement_list* out)
{
	out->push_back(in);
}

void Tree_transform::post_unset(AST_unset* in, AST_statement_list* out)
{
	out->push_back(in);
}

AST_variable* Tree_transform::pre_variable(AST_variable* in)
{
	return in;
}

AST_variable* Tree_transform::post_variable(AST_variable* in)
{
	return in;
}

void Tree_transform::pre_while(AST_while* in, AST_statement_list* out)
{
	out->push_back(in);
}

void Tree_transform::post_while(AST_while* in, AST_statement_list* out)
{
	out->push_back(in);
}

AST_expr* Tree_transform::pre_bool(Token_bool* in)
{
	return in;
}

AST_expr* Tree_transform::post_bool(Token_bool* in)
{
	return in;
}

Token_cast* Tree_transform::pre_cast(Token_cast* in)
{
	return in;
}

Token_cast* Tree_transform::post_cast(Token_cast* in)
{
	return in;
}

Token_class_name* Tree_transform::pre_class_name(Token_class_name* in)
{
	return in;
}

Token_class_name* Tree_transform::post_class_name(Token_class_name* in)
{
	return in;
}

Token_constant_name* Tree_transform::pre_constant_name(Token_constant_name* in)
{
	return in;
}

Token_constant_name* Tree_transform::post_constant_name(Token_constant_name* in)
{
	return in;
}

Token_directive_name* Tree_transform::pre_directive_name(Token_directive_name* in)
{
	return in;
}

Token_directive_name* Tree_transform::post_directive_name(Token_directive_name* in)
{
	return in;
}

AST_expr* Tree_transform::pre_int(Token_int* in)
{
	return in;
}

AST_expr* Tree_transform::post_int(Token_int* in)
{
	return in;
}

Token_interface_name* Tree_transform::pre_interface_name(Token_interface_name* in)
{
	return in;
}

Token_interface_name* Tree_transform::post_interface_name(Token_interface_name* in)
{
	return in;
}

Token_method_name* Tree_transform::pre_method_name(Token_method_name* in)
{
	return in;
}

Token_method_name* Tree_transform::post_method_name(Token_method_name* in)
{
	return in;
}

AST_expr* Tree_transform::pre_null(Token_null* in)
{
	return in;
}

AST_expr* Tree_transform::post_null(Token_null* in)
{
	return in;
}

Token_op* Tree_transform::pre_op(Token_op* in)
{
	return in;
}

Token_op* Tree_transform::post_op(Token_op* in)
{
	return in;
}

AST_expr* Tree_transform::pre_real(Token_real* in)
{
	return in;
}

AST_expr* Tree_transform::post_real(Token_real* in)
{
	return in;
}

AST_expr* Tree_transform::pre_string(Token_string* in)
{
	return in;
}

AST_expr* Tree_transform::post_string(Token_string* in)
{
	return in;
}

Token_variable_name* Tree_transform::pre_variable_name(Token_variable_name* in)
{
	return in;
}

Token_variable_name* Tree_transform::post_variable_name(Token_variable_name* in)
{
	return in;
}

void Tree_transform::children_php_script(AST_php_script* in)
{
	in->interface_defs = in->interface_defs->transform(this);
	in->class_defs = in->class_defs->transform(this);
}

void Tree_transform::children_interface_def(AST_interface_def* in)
{
	in->interface_name = in->interface_name->transform(this);
	in->extends = in->extends->transform(this);
	in->members = in->members->transform(this);
}

void Tree_transform::children_class_def(AST_class_def* in)
{
	in->class_mod = in->class_mod->transform(this);
	in->class_name = in->class_name->transform(this);
	if(in->extends != NULL) 
	in->extends = in->extends->transform(this);
	in->implements = in->implements->transform(this);
	in->members = in->members->transform(this);
}

void Tree_transform::children_class_mod(AST_class_mod* in)
{
}

void Tree_transform::children_method(AST_method* in)
{
	in->signature = in->signature->transform(this);
	if(in->statements != NULL) 
	in->statements = in->statements->transform(this);
}

void Tree_transform::children_signature(AST_signature* in)
{
	in->method_mod = in->method_mod->transform(this);
	in->method_name = in->method_name->transform(this);
	in->formal_parameters = in->formal_parameters->transform(this);
}

void Tree_transform::children_method_mod(AST_method_mod* in)
{
}

void Tree_transform::children_formal_parameter(AST_formal_parameter* in)
{
	in->type = in->type->transform(this);
	in->variable_name = in->variable_name->transform(this);
	if(in->expr != NULL) 
	in->expr = in->expr->transform(this);
}

void Tree_transform::children_type(AST_type* in)
{
	if(in->class_name != NULL) 
	in->class_name = in->class_name->transform(this);
}

void Tree_transform::children_attribute(AST_attribute* in)
{
	in->attr_mod = in->attr_mod->transform(this);
	in->variable_name = in->variable_name->transform(this);
	if(in->expr != NULL) 
	in->expr = in->expr->transform(this);
}

void Tree_transform::children_attr_mod(AST_attr_mod* in)
{
}

void Tree_transform::children_if(AST_if* in)
{
	in->expr = in->expr->transform(this);
	in->iftrue = in->iftrue->transform(this);
	in->iffalse = in->iffalse->transform(this);
}

void Tree_transform::children_while(AST_while* in)
{
	in->expr = in->expr->transform(this);
	in->statements = in->statements->transform(this);
}

void Tree_transform::children_do(AST_do* in)
{
	in->statements = in->statements->transform(this);
	in->expr = in->expr->transform(this);
}

void Tree_transform::children_for(AST_for* in)
{
	if(in->init != NULL) 
	in->init = in->init->transform(this);
	if(in->cond != NULL) 
	in->cond = in->cond->transform(this);
	if(in->incr != NULL) 
	in->incr = in->incr->transform(this);
	in->statements = in->statements->transform(this);
}

void Tree_transform::children_foreach(AST_foreach* in)
{
	in->expr = in->expr->transform(this);
	if(in->key != NULL) 
	in->key = in->key->transform(this);
	in->val = in->val->transform(this);
	in->statements = in->statements->transform(this);
}

void Tree_transform::children_switch(AST_switch* in)
{
	in->expr = in->expr->transform(this);
	in->switch_cases = in->switch_cases->transform(this);
}

void Tree_transform::children_switch_case(AST_switch_case* in)
{
	if(in->expr != NULL) 
	in->expr = in->expr->transform(this);
	in->statements = in->statements->transform(this);
}

void Tree_transform::children_break(AST_break* in)
{
	if(in->expr != NULL) 
	in->expr = in->expr->transform(this);
}

void Tree_transform::children_continue(AST_continue* in)
{
	if(in->expr != NULL) 
	in->expr = in->expr->transform(this);
}

void Tree_transform::children_return(AST_return* in)
{
	if(in->expr != NULL) 
	in->expr = in->expr->transform(this);
}

void Tree_transform::children_static_declaration(AST_static_declaration* in)
{
	in->variable_name = in->variable_name->transform(this);
	if(in->expr != NULL) 
	in->expr = in->expr->transform(this);
}

void Tree_transform::children_unset(AST_unset* in)
{
	in->variable = in->variable->transform(this);
}

void Tree_transform::children_declare(AST_declare* in)
{
	in->directives = in->directives->transform(this);
	in->statements = in->statements->transform(this);
}

void Tree_transform::children_directive(AST_directive* in)
{
	in->directive_name = in->directive_name->transform(this);
	in->expr = in->expr->transform(this);
}

void Tree_transform::children_try(AST_try* in)
{
	in->statements = in->statements->transform(this);
	in->catches = in->catches->transform(this);
}

void Tree_transform::children_catch(AST_catch* in)
{
	in->class_name = in->class_name->transform(this);
	in->variable_name = in->variable_name->transform(this);
	in->statements = in->statements->transform(this);
}

void Tree_transform::children_throw(AST_throw* in)
{
	in->expr = in->expr->transform(this);
}

void Tree_transform::children_eval_expr(AST_eval_expr* in)
{
	in->expr = in->expr->transform(this);
}

void Tree_transform::children_nop(AST_nop* in)
{
}

void Tree_transform::children_assignment(AST_assignment* in)
{
	in->variable = in->variable->transform(this);
	in->expr = in->expr->transform(this);
}

void Tree_transform::children_list_assignment(AST_list_assignment* in)
{
	in->list_elements = in->list_elements->transform(this);
	in->expr = in->expr->transform(this);
}

void Tree_transform::children_list_elements(AST_list_elements* in)
{
	in->list_elements = in->list_elements->transform(this);
}

void Tree_transform::children_cast(AST_cast* in)
{
	in->cast = in->cast->transform(this);
	in->expr = in->expr->transform(this);
}

void Tree_transform::children_unary_op(AST_unary_op* in)
{
	in->op = in->op->transform(this);
	in->expr = in->expr->transform(this);
}

void Tree_transform::children_bin_op(AST_bin_op* in)
{
	in->left = in->left->transform(this);
	in->op = in->op->transform(this);
	in->right = in->right->transform(this);
}

void Tree_transform::children_conditional_expr(AST_conditional_expr* in)
{
	in->cond = in->cond->transform(this);
	in->iftrue = in->iftrue->transform(this);
	in->iffalse = in->iffalse->transform(this);
}

void Tree_transform::children_ignore_errors(AST_ignore_errors* in)
{
	in->expr = in->expr->transform(this);
}

void Tree_transform::children_constant(AST_constant* in)
{
	in->class_name = in->class_name->transform(this);
	in->constant_name = in->constant_name->transform(this);
}

void Tree_transform::children_instanceof(AST_instanceof* in)
{
	in->expr = in->expr->transform(this);
	in->class_name = in->class_name->transform(this);
}

void Tree_transform::children_variable(AST_variable* in)
{
	if(in->target != NULL) 
	in->target = in->target->transform(this);
	in->variable_name = in->variable_name->transform(this);
	in->array_indices = in->array_indices->transform(this);
	if(in->string_index != NULL) 
	in->string_index = in->string_index->transform(this);
}

void Tree_transform::children_reflection(AST_reflection* in)
{
	in->expr = in->expr->transform(this);
}

void Tree_transform::children_pre_op(AST_pre_op* in)
{
	in->op = in->op->transform(this);
	in->variable = in->variable->transform(this);
}

void Tree_transform::children_post_op(AST_post_op* in)
{
	in->variable = in->variable->transform(this);
	in->op = in->op->transform(this);
}

void Tree_transform::children_array(AST_array* in)
{
	in->array_elems = in->array_elems->transform(this);
}

void Tree_transform::children_array_elem(AST_array_elem* in)
{
	if(in->key != NULL) 
	in->key = in->key->transform(this);
	in->val = in->val->transform(this);
}

void Tree_transform::children_method_invocation(AST_method_invocation* in)
{
	in->target = in->target->transform(this);
	in->method_name = in->method_name->transform(this);
	in->actual_parameters = in->actual_parameters->transform(this);
}

void Tree_transform::children_actual_parameter(AST_actual_parameter* in)
{
	in->expr = in->expr->transform(this);
}

void Tree_transform::children_new(AST_new* in)
{
	in->class_name = in->class_name->transform(this);
	in->actual_parameters = in->actual_parameters->transform(this);
}

void Tree_transform::children_clone(AST_clone* in)
{
	in->expr = in->expr->transform(this);
}

void Tree_transform::children_interface_name(Token_interface_name* in)
{
}

void Tree_transform::children_class_name(Token_class_name* in)
{
}

void Tree_transform::children_method_name(Token_method_name* in)
{
}

void Tree_transform::children_variable_name(Token_variable_name* in)
{
}

void Tree_transform::children_directive_name(Token_directive_name* in)
{
}

void Tree_transform::children_int(Token_int* in)
{
}

void Tree_transform::children_real(Token_real* in)
{
}

void Tree_transform::children_string(Token_string* in)
{
}

void Tree_transform::children_bool(Token_bool* in)
{
}

void Tree_transform::children_null(Token_null* in)
{
}

void Tree_transform::children_cast(Token_cast* in)
{
}

void Tree_transform::children_op(Token_op* in)
{
}

void Tree_transform::children_constant_name(Token_constant_name* in)
{
}

AST_interface_def_list* Tree_transform::pre_interface_def_list(AST_interface_def_list* in)
{
	return in;
}

void Tree_transform::children_interface_def_list(AST_interface_def_list* in)
{
	AST_interface_def_list* new_v = new AST_interface_def_list;
	List<AST_interface_def*>::const_iterator i;
	for(i = in->begin(); i != in->end(); i++)
		if(*i)
		{
			AST_interface_def_list* ret_v = (*i)->transform(this);
			new_v->push_back_all(ret_v);
		}
		else
			new_v->push_back(NULL);
	
	in->clear();
	in->push_back_all(new_v);
}

AST_interface_def_list* Tree_transform::post_interface_def_list(AST_interface_def_list* in)
{
	return in;
}

AST_class_def_list* Tree_transform::pre_class_def_list(AST_class_def_list* in)
{
	return in;
}

void Tree_transform::children_class_def_list(AST_class_def_list* in)
{
	AST_class_def_list* new_v = new AST_class_def_list;
	List<AST_class_def*>::const_iterator i;
	for(i = in->begin(); i != in->end(); i++)
		if(*i)
		{
			AST_class_def_list* ret_v = (*i)->transform(this);
			new_v->push_back_all(ret_v);
		}
		else
			new_v->push_back(NULL);
	
	in->clear();
	in->push_back_all(new_v);
}

AST_class_def_list* Tree_transform::post_class_def_list(AST_class_def_list* in)
{
	return in;
}

Token_interface_name_list* Tree_transform::pre_interface_name_list(Token_interface_name_list* in)
{
	return in;
}

void Tree_transform::children_interface_name_list(Token_interface_name_list* in)
{
	Token_interface_name_list* new_v = new Token_interface_name_list;
	List<Token_interface_name*>::const_iterator i;
	for(i = in->begin(); i != in->end(); i++)
		if(*i)
			new_v->push_back((*i)->transform(this));
		else
			new_v->push_back(NULL);
	
	in->clear();
	in->push_back_all(new_v);
}

Token_interface_name_list* Tree_transform::post_interface_name_list(Token_interface_name_list* in)
{
	return in;
}

AST_member_list* Tree_transform::pre_member_list(AST_member_list* in)
{
	return in;
}

void Tree_transform::children_member_list(AST_member_list* in)
{
	AST_member_list* new_v = new AST_member_list;
	List<AST_member*>::const_iterator i;
	for(i = in->begin(); i != in->end(); i++)
		if(*i)
		{
			AST_member_list* ret_v = (*i)->transform(this);
			new_v->push_back_all(ret_v);
		}
		else
			new_v->push_back(NULL);
	
	in->clear();
	in->push_back_all(new_v);
}

AST_member_list* Tree_transform::post_member_list(AST_member_list* in)
{
	return in;
}

AST_statement_list* Tree_transform::pre_statement_list(AST_statement_list* in)
{
	return in;
}

void Tree_transform::children_statement_list(AST_statement_list* in)
{
	AST_statement_list* new_v = new AST_statement_list;
	List<AST_statement*>::const_iterator i;
	for(i = in->begin(); i != in->end(); i++)
		if(*i)
		{
			AST_statement_list* ret_v = (*i)->transform(this);
			new_v->push_back_all(ret_v);
		}
		else
			new_v->push_back(NULL);
	
	in->clear();
	in->push_back_all(new_v);
}

AST_statement_list* Tree_transform::post_statement_list(AST_statement_list* in)
{
	return in;
}

AST_formal_parameter_list* Tree_transform::pre_formal_parameter_list(AST_formal_parameter_list* in)
{
	return in;
}

void Tree_transform::children_formal_parameter_list(AST_formal_parameter_list* in)
{
	AST_formal_parameter_list* new_v = new AST_formal_parameter_list;
	List<AST_formal_parameter*>::const_iterator i;
	for(i = in->begin(); i != in->end(); i++)
		if(*i)
		{
			AST_formal_parameter_list* ret_v = (*i)->transform(this);
			new_v->push_back_all(ret_v);
		}
		else
			new_v->push_back(NULL);
	
	in->clear();
	in->push_back_all(new_v);
}

AST_formal_parameter_list* Tree_transform::post_formal_parameter_list(AST_formal_parameter_list* in)
{
	return in;
}

AST_switch_case_list* Tree_transform::pre_switch_case_list(AST_switch_case_list* in)
{
	return in;
}

void Tree_transform::children_switch_case_list(AST_switch_case_list* in)
{
	AST_switch_case_list* new_v = new AST_switch_case_list;
	List<AST_switch_case*>::const_iterator i;
	for(i = in->begin(); i != in->end(); i++)
		if(*i)
		{
			AST_switch_case_list* ret_v = (*i)->transform(this);
			new_v->push_back_all(ret_v);
		}
		else
			new_v->push_back(NULL);
	
	in->clear();
	in->push_back_all(new_v);
}

AST_switch_case_list* Tree_transform::post_switch_case_list(AST_switch_case_list* in)
{
	return in;
}

AST_directive_list* Tree_transform::pre_directive_list(AST_directive_list* in)
{
	return in;
}

void Tree_transform::children_directive_list(AST_directive_list* in)
{
	AST_directive_list* new_v = new AST_directive_list;
	List<AST_directive*>::const_iterator i;
	for(i = in->begin(); i != in->end(); i++)
		if(*i)
		{
			AST_directive_list* ret_v = (*i)->transform(this);
			new_v->push_back_all(ret_v);
		}
		else
			new_v->push_back(NULL);
	
	in->clear();
	in->push_back_all(new_v);
}

AST_directive_list* Tree_transform::post_directive_list(AST_directive_list* in)
{
	return in;
}

AST_catch_list* Tree_transform::pre_catch_list(AST_catch_list* in)
{
	return in;
}

void Tree_transform::children_catch_list(AST_catch_list* in)
{
	AST_catch_list* new_v = new AST_catch_list;
	List<AST_catch*>::const_iterator i;
	for(i = in->begin(); i != in->end(); i++)
		if(*i)
		{
			AST_catch_list* ret_v = (*i)->transform(this);
			new_v->push_back_all(ret_v);
		}
		else
			new_v->push_back(NULL);
	
	in->clear();
	in->push_back_all(new_v);
}

AST_catch_list* Tree_transform::post_catch_list(AST_catch_list* in)
{
	return in;
}

AST_list_element_list* Tree_transform::pre_list_element_list(AST_list_element_list* in)
{
	return in;
}

void Tree_transform::children_list_element_list(AST_list_element_list* in)
{
	AST_list_element_list* new_v = new AST_list_element_list;
	List<AST_list_element*>::const_iterator i;
	for(i = in->begin(); i != in->end(); i++)
		if(*i)
			new_v->push_back((*i)->transform(this));
		else
			new_v->push_back(NULL);
	
	in->clear();
	in->push_back_all(new_v);
}

AST_list_element_list* Tree_transform::post_list_element_list(AST_list_element_list* in)
{
	return in;
}

AST_expr_list* Tree_transform::pre_expr_list(AST_expr_list* in)
{
	return in;
}

void Tree_transform::children_expr_list(AST_expr_list* in)
{
	AST_expr_list* new_v = new AST_expr_list;
	List<AST_expr*>::const_iterator i;
	for(i = in->begin(); i != in->end(); i++)
		if(*i)
			new_v->push_back((*i)->transform(this));
		else
			new_v->push_back(NULL);
	
	in->clear();
	in->push_back_all(new_v);
}

AST_expr_list* Tree_transform::post_expr_list(AST_expr_list* in)
{
	return in;
}

AST_array_elem_list* Tree_transform::pre_array_elem_list(AST_array_elem_list* in)
{
	return in;
}

void Tree_transform::children_array_elem_list(AST_array_elem_list* in)
{
	AST_array_elem_list* new_v = new AST_array_elem_list;
	List<AST_array_elem*>::const_iterator i;
	for(i = in->begin(); i != in->end(); i++)
		if(*i)
		{
			AST_array_elem_list* ret_v = (*i)->transform(this);
			new_v->push_back_all(ret_v);
		}
		else
			new_v->push_back(NULL);
	
	in->clear();
	in->push_back_all(new_v);
}

AST_array_elem_list* Tree_transform::post_array_elem_list(AST_array_elem_list* in)
{
	return in;
}

AST_actual_parameter_list* Tree_transform::pre_actual_parameter_list(AST_actual_parameter_list* in)
{
	return in;
}

void Tree_transform::children_actual_parameter_list(AST_actual_parameter_list* in)
{
	AST_actual_parameter_list* new_v = new AST_actual_parameter_list;
	List<AST_actual_parameter*>::const_iterator i;
	for(i = in->begin(); i != in->end(); i++)
		if(*i)
		{
			AST_actual_parameter_list* ret_v = (*i)->transform(this);
			new_v->push_back_all(ret_v);
		}
		else
			new_v->push_back(NULL);
	
	in->clear();
	in->push_back_all(new_v);
}

AST_actual_parameter_list* Tree_transform::post_actual_parameter_list(AST_actual_parameter_list* in)
{
	return in;
}
